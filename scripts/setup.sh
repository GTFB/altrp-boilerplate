#!/bin/bash

# Function to generate secure random secrets
generate_secret() {
  openssl rand -hex 32
}

# Function to show help
show_help() {
  cat << EOF
Development Environment Setup Script

USAGE:
  ./setup.sh -d <domain> [-h]

OPTIONS:
  -d <domain>     Project domain (required)
                  Example: altrp.localhost, example.com, mydomain.local
  
  -h              Show this help message

EXAMPLES:
  # For local development
  ./setup.sh -d altrp.localhost

  # For production
  ./setup.sh -d mydomain.com

  # For staging
  ./setup.sh -d staging.mydomain.com

DESCRIPTION:
  This script reads .env.template file and creates a .env file with all 
  necessary environment variables for the ALTRP project. It automatically 
  generates secure secrets for:
  - Database password
  - Payload CMS secret
  - N8N encryption key
  - Mastra API key
  
  The script validates required parameters and ensures all secrets are
  properly generated for secure deployment.

EOF
}

# Initialize variables
PROJECT_DOMAIN=""

# Parse command line arguments
while getopts "d:h" opt; do
  case ${opt} in
    d )
      PROJECT_DOMAIN="$OPTARG"
      ;;
    h )
      show_help
      exit 0
      ;;
    \? )
      echo "Error: Invalid option -$OPTARG" >&2
      echo "Use -h for help"
      exit 1
      ;;
    : )
      echo "Error: Option -$OPTARG requires an argument" >&2
      echo "Use -h for help"
      exit 1
      ;;
  esac
done

# Validate required parameters
if [ -z "$PROJECT_DOMAIN" ]; then
  echo "Error: Project domain is required (-d parameter)"
  echo "Use -h for help"
  exit 1
fi

# Check if .env.template exists
if [ ! -f "../.env.template" ]; then
  echo "Error: .env.template file not found in project root!"
  echo "Please ensure .env.template exists in the project directory."
  exit 1
fi

# Check if .env file already exists
if [ -f "../.env" ]; then
  echo "Error: .env file already exists!"
  echo "📁 Location: $(realpath ../.env)"
  echo ""
  echo "To regenerate the .env file, please:"
  echo "  1. Remove the existing file: rm ../.env"
  echo "  2. Run this script again: ./setup.sh -d ${PROJECT_DOMAIN}"
  echo ""
  echo "Or use -f flag to force overwrite (not implemented yet)"
  exit 1
fi

# Generate secrets
echo "Generating secure secrets..."
POSTGRES_PASSWORD=$(generate_secret)
PAYLOAD_SECRET=$(generate_secret)
N8N_ENCRYPTION_KEY=$(generate_secret)
MASTRA_API_KEY=$(generate_secret)

# Create .env file from template
echo "Creating .env file from .env.template..."

# Read template and substitute placeholders
sed -e "s/PROJECT_DOMAIN=altrp.localhost/PROJECT_DOMAIN=${PROJECT_DOMAIN}/" \
    -e "s/{GENERATE_POSTGRES_PASSWORD}/${POSTGRES_PASSWORD}/g" \
    -e "s/{GENERATE_PAYLOAD_SECRET}/${PAYLOAD_SECRET}/g" \
    -e "s/{GENERATE_N8N_ENCRYPTION_KEY}/${N8N_ENCRYPTION_KEY}/g" \
    -e "s/{GENERATE_MASTRA_API_KEY}/${MASTRA_API_KEY}/g" \
    -e "s/# --- COPY THIS FILE TO .env AND FILL IN THE VALUES ---/# --- GENERATED BY setup.sh SCRIPT ---/" \
    "../.env.template" > "../.env"

echo "✅ .env file created successfully!"
echo "📁 Location: $(realpath ../.env)"
echo "🔐 Generated secure secrets for:"
echo "   - Database password"
echo "   - Payload CMS secret"
echo "   - N8N encryption key"
echo "   - Mastra API key"
echo ""
echo "🚀 You can now run: docker-compose up -d"